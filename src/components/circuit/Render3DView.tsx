'use client';

import React, { useState, useEffect, useRef } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { CircuitSpec } from '@/types/circuit';
import { generate3DScene } from '@/lib/circuit/pcb-3d-renderer';
import { Download, RefreshCw, RotateCcw, Move3D, ZoomIn, ZoomOut } from 'lucide-react';

interface Render3DViewProps {
  circuitSpec: CircuitSpec;
}

export function Render3DView({ circuitSpec }: Render3DViewProps) {
  const [isGenerating, setIsGenerating] = useState(false);
  const [is3DReady, setIs3DReady] = useState(false);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const sceneRef = useRef<any>(null);

  useEffect(() => {
    generate3D();
  }, [circuitSpec]);

  const generate3D = async () => {
    setIsGenerating(true);
    try {
      const scene = generate3DScene(circuitSpec);
      // In a real implementation, you would initialize Three.js here
      // For now, we'll just simulate the 3D scene generation
      setTimeout(() => {
        setIs3DReady(true);
        setIsGenerating(false);
      }, 2000);
    } catch (error) {
      console.error('Error generating 3D scene:', error);
      setIsGenerating(false);
    }
  };

  const handleDownloadSTL = () => {
    // In a real implementation, this would export the 3D model as STL
    const stlContent = `solid circuit_model
  # PCB Base
  facet normal 0 0 1
    outer loop
      vertex 0 0 0
      vertex 100 0 0
      vertex 100 80 0
    endloop
  endfacet
endsolid circuit_model`;

    const blob = new Blob([stlContent], { type: 'application/octet-stream' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${circuitSpec.circuit_name}_3d_model.stl`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const handleDownloadOBJ = () => {
    // In a real implementation, this would export the 3D model as OBJ
    const objContent = `# OBJ Export for Circuit 3D Model
# Generated by Real Circuit Image Copilot

# PCB Base
v 0 0 0
v 100 0 0
v 100 80 0
v 0 80 0

f 1 2 3 4`;

    const blob = new Blob([objContent], { type: 'application/octet-stream' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${circuitSpec.circuit_name}_3d_model.obj`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <div>
            <CardTitle>3D PCB Render</CardTitle>
            <CardDescription>Interactive 3D visualization of the PCB with components</CardDescription>
          </div>
          <div className="flex items-center gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={generate3D}
              disabled={isGenerating}
            >
              <RefreshCw className={`h-4 w-4 ${isGenerating ? 'animate-spin' : ''}`} />
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={handleDownloadSTL}
              disabled={!is3DReady}
            >
              <Download className="h-4 w-4" />
              STL
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={handleDownloadOBJ}
              disabled={!is3DReady}
            >
              <Download className="h-4 w-4" />
              OBJ
            </Button>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <div className="border rounded-lg overflow-hidden bg-gray-900">
          {isGenerating ? (
            <div className="flex items-center justify-center h-96">
              <div className="text-center">
                <RefreshCw className="h-8 w-8 animate-spin mx-auto mb-2 text-blue-400" />
                <p className="text-sm text-gray-300">Generating 3D model...</p>
              </div>
            </div>
          ) : is3DReady ? (
            <div className="relative h-96">
              <canvas
                ref={canvasRef}
                className="w-full h-full"
                style={{ background: 'linear-gradient(135deg, #1e3a8a 0%, #3b82f6 100%)' }}
              />
              <div className="absolute top-4 left-4 bg-black/50 text-white p-2 rounded">
                <div className="text-xs space-y-1">
                  <div className="flex items-center gap-2">
                    <Move3D className="h-3 w-3" />
                    <span>Left click + drag to rotate</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <ZoomIn className="h-3 w-3" />
                    <span>Scroll to zoom</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <RotateCcw className="h-3 w-3" />
                    <span>Right click + drag to pan</span>
                  </div>
                </div>
              </div>
            </div>
          ) : (
            <div className="flex items-center justify-center h-96">
              <div className="text-center">
                <Move3D className="h-8 w-8 mx-auto mb-2 text-gray-400" />
                <p className="text-sm text-gray-300">3D model not available</p>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={generate3D}
                  className="mt-2"
                >
                  Generate 3D Model
                </Button>
              </div>
            </div>
          )}
        </div>
        
        {is3DReady && (
          <div className="mt-4 space-y-3">
            <div className="p-3 bg-blue-50 rounded-lg">
              <h4 className="text-sm font-medium text-blue-900 mb-2">3D Model Information</h4>
              <div className="text-xs text-blue-700 space-y-1">
                <p>• Components: {circuitSpec.components.length}</p>
                <p>• PCB layers: {circuitSpec.pcb_hints.layer}</p>
                <p>• Generated using Three.js</p>
                <p>• Compatible with KiCad 3D models</p>
              </div>
            </div>
            
            <div className="p-3 bg-gray-50 rounded-lg">
              <h4 className="text-sm font-medium text-gray-900 mb-2">Export Options</h4>
              <div className="text-xs text-gray-700 space-y-1">
                <p>• STL: For 3D printing</p>
                <p>• OBJ: For 3D viewing software</p>
                <p>• Interactive: Web-based 3D viewer</p>
                <p>• VR/AR: Compatible with WebXR</p>
              </div>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
