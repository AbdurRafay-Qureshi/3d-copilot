'use client';

import React, { useState } from 'react';
import { DescriptionForm } from '@/components/circuit/DescriptionForm';
import { SpecViewer } from '@/components/circuit/SpecViewer';
import { SchematicView } from '@/components/circuit/SchematicView';
import { BreadboardView } from '@/components/circuit/BreadboardView';
import { PCBView } from '@/components/circuit/PCBView';
import { Render3DView } from '@/components/circuit/Render3DView';
import { AssemblyGuide } from '@/components/circuit/AssemblyGuide';
import { ExportPanel } from '@/components/circuit/ExportPanel';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { CircuitSpec, CircuitImages } from '@/types/circuit';
import { MockTamboClient } from '@/lib/ai/tambo-client';
import { generateSchematicSVG } from '@/lib/circuit/netlistsvg-adapter';
import { generateBreadboardFromCircuit } from '@/lib/circuit/fritzing-parser';
import { generateKiCadFromCircuit } from '@/lib/circuit/kicad-parser';
import { Loader2, AlertCircle } from 'lucide-react';

export default function HomePage() {
  const [circuitSpec, setCircuitSpec] = useState<CircuitSpec | null>(null);
  const [images, setImages] = useState<CircuitImages>({
    schematic: '',
    breadboard: '',
    pcb: '',
    render_3d: '',
    photorealistic: ''
  });
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleGenerate = async (description: string) => {
    setIsLoading(true);
    setError(null);
    
    try {
      // Use mock client for demonstration
      const client = new MockTamboClient();
      const spec = await client.generateCircuitSpec(description);
      setCircuitSpec(spec);

      // Generate images
      const schematic = generateSchematicSVG(spec);
      const breadboard = generateBreadboardFromCircuit(spec);
      const { pcb } = generateKiCadFromCircuit(spec);

      setImages({
        schematic,
        breadboard,
        pcb,
        render_3d: '', // Would be generated by 3D renderer
        photorealistic: '' // Would be generated by Stable Diffusion
      });
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to generate circuit');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <h1 className="text-2xl font-bold text-gray-900">
            Real Circuit Image Copilot
          </h1>
          <p className="text-gray-600">
            Transform natural language into realistic circuit diagrams, breadboard layouts, PCBs, and assembly guides
          </p>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {!circuitSpec ? (
          <div className="flex justify-center">
            <DescriptionForm onGenerate={handleGenerate} isLoading={isLoading} />
          </div>
        ) : (
          <div className="space-y-8">
            {/* Error Display */}
            {error && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                <div className="flex items-center gap-2">
                  <AlertCircle className="h-5 w-5 text-red-600" />
                  <span className="text-red-800">{error}</span>
                </div>
              </div>
            )}

            {/* Main Content Tabs */}
            <Tabs defaultValue="spec" className="space-y-6">
              <TabsList className="grid w-full grid-cols-6">
                <TabsTrigger value="spec">Spec</TabsTrigger>
                <TabsTrigger value="schematic">Schematic</TabsTrigger>
                <TabsTrigger value="breadboard">Breadboard</TabsTrigger>
                <TabsTrigger value="pcb">PCB</TabsTrigger>
                <TabsTrigger value="3d">3D</TabsTrigger>
                <TabsTrigger value="assembly">Assembly</TabsTrigger>
              </TabsList>

              <TabsContent value="spec" className="space-y-6">
                <SpecViewer circuitSpec={circuitSpec} />
              </TabsContent>

              <TabsContent value="schematic" className="space-y-6">
                <SchematicView circuitSpec={circuitSpec} />
              </TabsContent>

              <TabsContent value="breadboard" className="space-y-6">
                <BreadboardView circuitSpec={circuitSpec} />
              </TabsContent>

              <TabsContent value="pcb" className="space-y-6">
                <PCBView circuitSpec={circuitSpec} />
              </TabsContent>

              <TabsContent value="3d" className="space-y-6">
                <Render3DView circuitSpec={circuitSpec} />
              </TabsContent>

              <TabsContent value="assembly" className="space-y-6">
                <AssemblyGuide circuitSpec={circuitSpec} />
              </TabsContent>
            </Tabs>

            {/* Export Panel */}
            <div className="border-t pt-8">
              <ExportPanel circuitSpec={circuitSpec} images={images} />
            </div>

            {/* Generate New Circuit */}
            <div className="text-center">
              <button
                onClick={() => {
                  setCircuitSpec(null);
                  setImages({
                    schematic: '',
                    breadboard: '',
                    pcb: '',
                    render_3d: '',
                    photorealistic: ''
                  });
                  setError(null);
                }}
                className="text-blue-600 hover:text-blue-800 font-medium"
              >
                Generate a new circuit
              </button>
            </div>
          </div>
        )}
      </main>

      {/* Footer */}
      <footer className="bg-white border-t mt-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="text-center text-gray-600">
            <p>Built with Next.js, TypeScript, and open-source EDA tools</p>
            <p className="text-sm mt-2">
              Powered by Tambo AI, KiCad, Fritzing, netlistsvg, and Three.js
            </p>
          </div>
        </div>
      </footer>
    </div>
  );
}
